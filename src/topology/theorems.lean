import topology.definitions tactic

/-
A topological space (X, ùíØ) consists of a non-empty set X 
together with a collection ùíØ of subsets of X that satisfy 
- ‚àÖ ‚àà ùíØ, X ‚àà ùíØ
- U, V ‚àà ùíØ ‚Üí U ‚à© V ‚àà ùíØ 
- U·µ¢ ‚àà ùíØ ‚Üí ‚ãÉ·µ¢ U ‚àà ùíØ
Elements of ùíØ are called open sets in (X, ùíØ) and ùíØ is 
called a topology on X.

In Lean this is represented by:

structure topological_space (Œ± : Type u) :=
(is_open        : set Œ± ‚Üí Prop)
(is_open_univ   : is_open univ)
(is_open_inter  : ‚àÄs t, is_open s ‚Üí is_open t ‚Üí is_open (s ‚à© t))
(is_open_sUnion : ‚àÄs, (‚àÄ t ‚àà s, is_open t) ‚Üí is_open (‚ãÉ‚ÇÄ s))
-/

variables {X : Type*} [topological_space X]
variables {Y : Type*} [topological_space Y] 
variables {Z : Type*} [topological_space Z]

/- We allow excluded middle since we are not computer scientists -/
local attribute [instance] classical.prop_decidable

open definitions set function

/- We'll prove the axiom left out in Lean's version - ‚àÖ is open -/
theorem empty_is_open : is_open (‚àÖ : set X) :=
begin
  rw ‚ÜêsUnion_empty, apply is_open_sUnion, intros _ h,
  exfalso, exact h
end

/-
If X is a topological space, then U ‚äÜ X is open iff for all x ‚àà U,
there exists an open set N‚Çì with x ‚àà N‚Çì and N‚Çì ‚äÜ U

This theorem will be useful when we want to prove that a particular 
set is open or closed
-/
-- The forward direction is trivial enough
lemma has_smaller_of_open {U : set X} (h : is_open U) : 
‚àÄ x ‚àà U, ‚àÉ (N‚Çì : set X) (h‚ÇÄ : is_open N‚Çì), x ‚àà N‚Çì ‚àß N‚Çì ‚äÜ U := Œª x hx,
‚ü®U, h, hx, subset.refl U‚ü©

/- The backwards direction is easy once we see that we can make U 
  from the suitable union of N‚Çì  -/
lemma open_of_has_smaller {U : set X} 
(h : ‚àÄ x ‚àà U, ‚àÉ (N‚Çì : set X) (h‚ÇÄ : is_open N‚Çì), x ‚àà N‚Çì ‚àß N‚Çì ‚äÜ U) :
is_open U :=
begin
  choose f hfo hf using h,
  have : is_open ‚ãÉ (x ‚àà U), f x H := 
    is_open_Union (Œª x, is_open_Union $ Œª h, hfo x h), 
  convert this, ext, 
  refine ‚ü®Œª h, mem_Union.2 ‚ü®x, mem_Union.2 ‚ü®h, (hf x h).1‚ü©‚ü©, Œª h, _‚ü©,
    cases mem_Union.1 h with y hy, cases mem_Union.1 hy with hy‚ÇÄ hy‚ÇÅ,
    exact (hf y hy‚ÇÄ).2 hy‚ÇÅ
end

theorem open_iff_has_smaller {U : set X} : is_open U ‚Üî 
‚àÄ x ‚àà U, ‚àÉ (N‚Çì : set X) (h‚ÇÄ : is_open N‚Çì), x ‚àà N‚Çì ‚àß N‚Çì ‚äÜ U :=
‚ü®has_smaller_of_open, open_of_has_smaller‚ü©

namespace mapping

open function equiv

/- The composition of two continuous functions is also continuous -/
theorem comp_contin {f : X ‚Üí Y} {g : Y ‚Üí Z} 
(hf : is_continuous f) (hg : is_continuous g) : 
is_continuous (g ‚àò f) := Œª U hU, hf _ (hg _ hU)

/- A function is continuous iff. it is continuous at every point -/
lemma contin_at_all_of_contin {f : X ‚Üí Y} (h : is_continuous f) : 
‚àÄ x : X, is_continuous_at f x := Œª _ U _ hU, h U hU

lemma contin_of_contin_at_all {f : X ‚Üí Y} 
(h : ‚àÄ x : X, is_continuous_at f x) : is_continuous f := Œª U hU,
begin
  cases (classical.em $ f ‚Åª¬π' U = ‚àÖ) with hempt hnempt,
    { rw hempt, exact empty_is_open },
    { cases ne_empty_iff_nonempty.1 hnempt with x hx,
      exact h _ _ (mem_preimage.1 hx) hU }
end

theorem contin_iff_contin_at_all (f : X ‚Üí Y) : 
is_continuous f ‚Üî ‚àÄ x : X, is_continuous_at f x :=
  ‚ü®contin_at_all_of_contin, contin_of_contin_at_all‚ü©

/- 
A bijection of sets f : X ‚Üí Y gives a homeomorphism of topological 
spaces X ‚Üí Y iff. it induces a bijection ùíØ(X) ‚Üí ùíØ(Y) : U ‚Üí f(U)
-/
theorem topo_contin_biject_of_equiv (hequiv : X ‚âÉ* Y) : 
‚àÉ (f : X ‚Üí Y) (h‚ÇÄ : bijective f) (h‚ÇÅ : is_continuous f), 
‚àÄ U : set X, is_open U ‚Üí is_open (f '' U) := 
begin
  refine ‚ü®hequiv.to_fun, _, hequiv.contin, Œª U hU, _‚ü©,
  refine ‚ü®hequiv.left_inv.injective, hequiv.right_inv.surjective‚ü©,
  convert hequiv.inv_contin U hU, 
  ext, split; intro hx,
    { rcases (mem_image _ _ _).1 hx with ‚ü®y, hy‚ÇÄ, hy‚ÇÅ‚ü©,
      rw ‚Üêhy‚ÇÅ, simp [hy‚ÇÄ] },
    { refine ‚ü®(hequiv.to_equiv.symm) x, hx, _‚ü©, simp }
end

lemma preimage_eq_inv {f : X ‚Üí Y} {U : set X} (hf : bijective f) : 
f '' U = (of_bijective hf).inv_fun ‚Åª¬π' U :=
begin
  ext, split; intro hx,
    { rcases (mem_image _ _ _).1 hx with ‚ü®y, hy‚ÇÄ, hy‚ÇÅ‚ü©,
      rw [‚Üêhy‚ÇÅ, mem_preimage], 
      have : left_inverse (of_bijective hf).inv_fun f := 
        (of_bijective hf).left_inv, 
      rwa this y },
    { refine ‚ü®(of_bijective hf).inv_fun x, hx, _‚ü©,
      have : right_inverse (of_bijective hf).inv_fun f := 
        (of_bijective hf).right_inv,
      rwa this x
    }
end

noncomputable theorem equiv_of_topo_contin_biject {f : X ‚Üí Y} 
(hf‚ÇÄ : bijective f) (hf‚ÇÅ : ‚àÄ U : set X, is_open U ‚Üí is_open (f '' U)) 
(hf‚ÇÇ : is_continuous f) : X ‚âÉ* Y :=
{ contin := hf‚ÇÇ,
  inv_contin := Œª U hU, by rw ‚Üêpreimage_eq_inv hf‚ÇÄ; exact hf‚ÇÅ U hU,
  .. of_bijective hf‚ÇÄ }

end mapping

namespace closed

/- Giving closure the attribute reducible so lean will automatically 
unfold the definition instead of us manually telling it do so -/
attribute [reducible] closure

/- The closure of a set is the smallest closed set continaing it -/
theorem closure_is_min {U U' : set X} (hle : U ‚äÜ U') (hc : is_closed U') :
closure U ‚äÜ U' := 
begin
  intros x hx, rw mem_sInter at hx,
  exact hx U' ‚ü®hc, hle‚ü©
end

/- The closure of a set is the set of limit points -/
lemma limit_points_is_closed {U : set X}: 
is_closed $ limit_points U := 
begin
  refine open_iff_has_smaller.2 (Œª x hx, _),
  simp at hx, rcases hx with ‚ü®U', hU'‚ÇÄ, hU'‚ÇÅ, hU'‚ÇÇ‚ü©,
  exact ‚ü®U', hU'‚ÇÄ, hU'‚ÇÅ, Œª y hy, by simp; exact ‚ü®U', hU'‚ÇÄ, hy, hU'‚ÇÇ‚ü©‚ü©,
end

lemma limit_points_ge {U : set X} : U ‚äÜ limit_points U := 
Œª x hx _ _ hU', ne_empty_iff_nonempty.2 ‚ü®x, hU', hx‚ü©

lemma closure_le_limit_points (U : set X) :
closure U ‚äÜ limit_points U := 
  closure_is_min limit_points_ge limit_points_is_closed

lemma limit_points_le_closure (U : set X) :
limit_points U ‚äÜ closure U := Œª x hx U' hU',
classical.by_contradiction $ Œª hf,
  let ‚ü®y, hy‚ü© := ne_empty_iff_nonempty.1 (hx (- U') (hU'.1) hf) in
not_subset.2 ‚ü®y, hy.2, hy.1‚ü© hU'.2

theorem closure_eq_limit_points (U : set X) : 
closure U = limit_points U :=
le_antisymm (closure_le_limit_points U) (limit_points_le_closure U)

/- A set is smaller than its closure -/
theorem set_le_closure (U : set X) : U ‚äÜ closure U := 
Œª x hx, mem_sInter.1 $ Œª U' hU', hU'.2 hx

/- If A ‚äÜ B then the closure of A is smaller than the closure of B -/
theorem closure_mono' {U V : set X} (hle : U ‚äÜ V) :
closure U ‚äÜ closure V := Œª x hx A hA, hx _ ‚ü®hA.1, subset.trans hle hA.2‚ü©

/- The closure of a closed set is itself-/
theorem closure_of_closed {U : set X} (h : is_closed U) :
closure U = U := ext $ Œª x, 
  ‚ü®Œª hx, hx U ‚ü®h, subset.refl U‚ü©, Œª hx, set_le_closure U hx‚ü©

/- The intersection of closed sets is closed -/
theorem is_closed_Inter {Œπ} {f : Œπ ‚Üí set X} (hf : ‚àÄ i : Œπ, is_closed (f i)) : 
is_closed (‚ãÇ Œπ, f Œπ) :=
by unfold is_closed; rw compl_Inter; refine is_open_Union hf

/- The closure of a set is closed -/
theorem closure_is_closed (U : set X) : is_closed $ closure U := 
begin
  unfold is_closed, rw compl_sInter,
  refine is_open_sUnion (Œª _ hU', _),
  rcases hU' with ‚ü®_, ‚ü®hU'‚ÇÄ, _‚ü©, hU'‚ÇÅ‚ü©,
  exact hU'‚ÇÅ ‚ñ∏ hU'‚ÇÄ
end

end closed

namespace interior

open closed

/- The interior of a set equals the set of its interior points -/
theorem interior_eq_interior_points {U : set X} :
interior U = interior_points U := ext $ Œª x,
  ‚ü®Œª hx, let ‚ü®U', ‚ü®hU'‚ÇÄ, hU'‚ÇÅ‚ü©, hU'‚ÇÇ‚ü© := hx in ‚ü®U', hU'‚ÇÄ, hU'‚ÇÅ, hU'‚ÇÇ‚ü©,
   Œª hx, let ‚ü®U', hU'‚ÇÄ, hU'‚ÇÅ, hU'‚ÇÇ‚ü© := hx in ‚ü®U', ‚ü®hU'‚ÇÄ, hU'‚ÇÅ‚ü©, hU'‚ÇÇ‚ü©‚ü©

/- The closure of -U equals the complement of the interior of U -/
theorem closure_compl_eq_compl_interior {U : set X} :
closure (-U) = - interior U := 
begin
  ext, split; rw [closure_eq_limit_points, interior_eq_interior_points],
    { intros hx‚ÇÄ hx‚ÇÅ,
      rcases hx‚ÇÅ with ‚ü®U', hU'‚ÇÄ, hU'‚ÇÅ, hU'‚ÇÇ‚ü©,
      exact hx‚ÇÄ U' hU'‚ÇÄ hU'‚ÇÇ (diff_eq_empty.2 hU'‚ÇÅ) },
    { intros hx U' hU'‚ÇÄ hU'‚ÇÅ hU'‚ÇÇ,
      simp at hx, exact hx U' hU'‚ÇÄ (diff_eq_empty.1 hU'‚ÇÇ) hU'‚ÇÅ }
end

theorem interior_eq_compl_closure_compl {U : set X} :
interior U = - closure (-U) := by simp [closure_compl_eq_compl_interior]

/- With the above theorem in place, we can straightaway analougous theorems 
to the ones we've proved for closure -/

/- The interior of a set is smaller than the set -/
theorem interior_le_set (U : set X) : interior U ‚äÜ U := 
by rw [interior_eq_compl_closure_compl, compl_subset_comm]; exact set_le_closure (-U)

/- If A ‚äÜ B, then the interior of A ‚äÜ interior of B -/
theorem interior_mono {U V : set X} (hle : U ‚äÜ V) : 
interior U ‚äÜ interior V := 
begin 
  repeat { rw [interior_eq_compl_closure_compl] },
  rw [compl_subset_comm, compl_compl],
  exact closure_mono' (compl_subset_compl.mpr hle)
end

/- The interior of an open set is itself -/
theorem interior_of_open {U : set X} (h : is_open U) :
interior U = U := 
begin
  rw interior_eq_compl_closure_compl,
  suffices : closure (-U) = -U, simp [this],
  exact closure_of_closed (by simp [compl_compl, h])
end

/- The interior of a set is open -/
theorem interior_is_open (U : set X) : is_open $ interior U :=
by rw interior_eq_compl_closure_compl; simp [closure_is_closed]

/- The interior of the interior is the interior -/
theorem interior_of_interior (U : set X) :
(interior $ interior U) = interior U := 
interior_of_open $ interior_is_open U

/- The interior of a set is the larges open set contained in 
the set -/
theorem interior_is_max {U U' : set X} (hle : U' ‚äÜ U) (hc : is_open U') :
U' ‚äÜ interior U := 
by rw [interior_eq_compl_closure_compl, subset_compl_comm];
  exact closure_is_min (compl_subset_compl.2 hle) (by simp [hc])

end interior

namespace mapping

variables {U : set X} {V : set Y} {f : X ‚Üí Y}

/- A mapping f : X ‚Üí Y is continuous iff f‚Åª¬π(U) is closed whenever 
U is closed-/
lemma preimage_closed_of_closed (h : is_closed V)
(hcontin : is_continuous f) : is_closed (f ‚Åª¬π' V) :=
by unfold is_closed; rw ‚Üêpreimage_compl; exact hcontin _ h

lemma contin_of_preimage_closed_of_closed 
(h : ‚àÄ V, is_closed V ‚Üí is_closed (f ‚Åª¬π' V)) : is_continuous f :=
begin
  intros U hU,
  suffices : is_closed (- (f ‚Åª¬π' U)),
    { unfold is_closed at this, rwa compl_compl at this },
  rw ‚Üêpreimage_compl,
  refine h _ _, unfold is_closed, rwa compl_compl
end

theorem contin_iff_preimage_closed_of_closed : is_continuous f ‚Üî 
‚àÄ V, is_closed V ‚Üí is_closed (f ‚Åª¬π' V) :=
‚ü®Œª h V hV, preimage_closed_of_closed hV h, 
  Œª h, contin_of_preimage_closed_of_closed h‚ü©

open closed

/- A mapping f : X ‚Üí Y is continuous imples f(closure A) ‚äÜ closure f(A) -/
theorem map_closure_le_closure_map (hcontin : is_continuous f) :
f '' closure U ‚äÜ closure (f '' U) := 
begin
  rw contin_iff_preimage_closed_of_closed at hcontin,
  suffices : closure U ‚äÜ f ‚Åª¬π' closure (f '' U),
    intros _ hy,
    rcases (mem_image _ _ _).1 hy with ‚ü®_, hx‚ÇÄ, hx‚ÇÅ‚ü©,
    rw ‚Üêhx‚ÇÅ, exact mem_preimage.1 (this hx‚ÇÄ),
  exact closure_is_min (Œª _ hu, mem_preimage.2 (set_le_closure _ (mem_image_of_mem f hu)))
   (hcontin _ (closure_is_closed $ f '' U)),
end

end mapping

namespace subspaces

open mapping

/- The inclusion map is continuous -/
theorem inclusion_is_continuous (A : set X) : is_continuous ùíæ A :=
begin
  intros U hU, refine ‚ü®U, hU, _‚ü©,
  ext, split; intro hx,
    { rw preimage, use x, 
      exact hx.1, refine ‚ü®hx.2, rfl‚ü© },
    { rcases hx with ‚ü®x', hx'‚ÇÄ, hx'‚ÇÅ‚ü©,
      rw ‚Üêhx'‚ÇÅ, split,
        exact subtype.val_prop x',
        simp at hx'‚ÇÄ, assumption }
end

/- (Universal Property) -/
lemma comp_inclusion_is_contin_of_is_contin {A : set X} {f : Z ‚Üí A}
(h : is_continuous f) : is_continuous $ (ùíæ A) ‚àò f := 
comp_contin h (inclusion_is_continuous A)

-- There has to be a better way to deal with type conversions :/
theorem is_contin_of_comp_inclusion_is_contin {A : set X} {f : Z ‚Üí A}
(h : is_continuous $ (ùíæ A) ‚àò f) : is_continuous f := 
begin
  intros U hU, rcases hU with ‚ü®V, hV‚ÇÄ, hV‚ÇÅ‚ü©,
  suffices : f ‚Åª¬π' U = (ùíæ A) ‚àò f ‚Åª¬π' V,
    rw this, exact h _ hV‚ÇÄ,
  ext, split; intro hx,
    { show ‚Üë(f x) ‚àà V, suffices : ‚ÜëU ‚äÜ V,
        apply this, exact mem_image_of_mem coe hx,
      rw ‚ÜêhV‚ÇÅ, exact inter_subset_right A V },
    { rw mem_preimage at *,
      replace hx : ‚Üë(f x) ‚àà V, exact hx,
      have : ‚Üë(f x) ‚àà ‚ÜëU,
        rw ‚ÜêhV‚ÇÅ, exact mem_inter (subtype.val_prop' _) hx,
      cases f x with fx‚ÇÄ _,
      rcases this with ‚ü®y, hy‚ÇÄ, hy‚ÇÅ‚ü©, 
      convert hy‚ÇÄ, cases y, 
      suffices : fx‚ÇÄ = y_val, simp only [subtype.mk_eq_mk], assumption,
      simp only [subtype.coe_mk] at hy‚ÇÅ, rw hy‚ÇÅ
    }
end

theorem is_contin_iff_comp_inclusion_is_contin {A : set X} {f : Z ‚Üí A} :
is_continuous f ‚Üî (is_continuous $ (ùíæ A) ‚àò f) := 
‚ü® Œª h, comp_inclusion_is_contin_of_is_contin h, 
  Œª h, is_contin_of_comp_inclusion_is_contin h ‚ü©

end subspaces

namespace Hausdorff_spaces

/- Sequence in a topological space have unique limits if that topological 
space is Hausdorff (the inverse is in general not true) -/
theorem unique_limit_of_Hausdorff {x : ‚Ñï ‚Üí X} {l k : X} (h : is_Hausdorff X)
(hl : converge_to x l) (hk : converge_to x k) : l = k :=
classical.by_contradiction $ Œª hne,
  let ‚ü®U, V, hU, hV, hlU, hkV, hdisj‚ü© := h l k hne in
  let ‚ü®N‚ÇÅ, hN‚ÇÅ‚ü© := hl _ hU hlU in let ‚ü®N‚ÇÇ, hN‚ÇÇ‚ü© := hk _ hV hkV in
not_mem_empty (x (max N‚ÇÅ N‚ÇÇ)) 
  (hdisj ‚ñ∏ ‚ü®hN‚ÇÅ _ (le_max_left N‚ÇÅ N‚ÇÇ), hN‚ÇÇ _ (le_max_right N‚ÇÅ N‚ÇÇ)‚ü©)

/- If Y is Hausdorff and there exists a continuous injective map from 
X to Y then X is also Hausdorff -/
theorem Hausdorff_of_continuous_inj (f : X ‚Üí Y) (h : is_Hausdorff Y)
(hcontin : is_continuous f) (hinj : injective f) : is_Hausdorff X :=
begin
  intros x y hxy,
  rcases h _ _ (Œª hf, hxy (hinj hf)) with ‚ü®U, V, hU‚ÇÄ, hV‚ÇÄ, hU‚ÇÅ, hV‚ÇÅ, hdisj‚ü©,
  refine ‚ü®f ‚Åª¬π' U, f ‚Åª¬π' V, hcontin U hU‚ÇÄ, hcontin V hV‚ÇÄ, hU‚ÇÅ, hV‚ÇÅ, _‚ü©,
  ext z, split; intro hz,
    { cases hz with hz‚ÇÄ hz‚ÇÅ,
      rw mem_preimage at *,
      exfalso, refine @not_mem_empty Y (f z) _,
      rw ‚Üêhdisj, exact ‚ü®hz‚ÇÄ, hz‚ÇÅ‚ü© },
    { exfalso, exact (not_mem_empty z) hz },
end

/- A subspace of a Hausdorff space is Hausdorff -/
theorem subspace_Hausdorff {A : set X} (h : is_Hausdorff X) : is_Hausdorff A := 
Hausdorff_of_continuous_inj (ùíæ A) h (subspaces.inclusion_is_continuous A) 
  (Œª _ _ hxy, subtype.eq hxy)

/- If X ‚âÉ* Y, then X is Hausdorff ‚áî Y is Hausdorff -/
lemma Hausdorff_of_equiv (h : is_Hausdorff Y) (hequiv : X ‚âÉ* Y) : 
is_Hausdorff X :=
Hausdorff_of_continuous_inj hequiv.to_fun h hequiv.contin (equiv.injective hequiv.1)

lemma equiv_symm (hequiv : X ‚âÉ* Y) : Y ‚âÉ* X := 
{ contin := hequiv.inv_contin,
  inv_contin := hequiv.contin,
  .. equiv.symm hequiv.1 }

theorem Hausdorff_equiv (hequiv : X ‚âÉ* Y) : 
is_Hausdorff X ‚Üî is_Hausdorff Y :=
iff.intro (Œª h, Hausdorff_of_equiv h (equiv_symm hequiv)) 
  (Œª h, Hausdorff_of_equiv h hequiv)

end Hausdorff_spaces